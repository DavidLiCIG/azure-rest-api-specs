// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace foo.bar
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LargePersonGroupPerson.
    /// </summary>
    public static partial class LargePersonGroupPersonExtensions
    {
            /// <summary>
            /// Create a new person in a specified large person group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            public static Person Create(this ILargePersonGroupPerson operations, string largePersonGroupId, string name = default(string), string userData = default(string))
            {
                return operations.CreateAsync(largePersonGroupId, name, userData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new person in a specified large person group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Person> CreateAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, string name = default(string), string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(largePersonGroupId, name, userData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all persons in a large person group, and retrieve person information
            /// (including personId, name, userData and persistedFaceIds of registered
            /// faces of the person).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='start'>
            /// Starting person id to return (used to list a range of persons).
            /// </param>
            /// <param name='top'>
            /// Number of persons to return starting with the person id indicated by the
            /// 'start' parameter.
            /// </param>
            public static IList<Person> List(this ILargePersonGroupPerson operations, string largePersonGroupId, string start = default(string), int? top = default(int?))
            {
                return operations.ListAsync(largePersonGroupId, start, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all persons in a large person group, and retrieve person information
            /// (including personId, name, userData and persistedFaceIds of registered
            /// faces of the person).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='start'>
            /// Starting person id to return (used to list a range of persons).
            /// </param>
            /// <param name='top'>
            /// Number of persons to return starting with the person id indicated by the
            /// 'start' parameter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Person>> ListAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, string start = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(largePersonGroupId, start, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing person from a large person group. All stored person
            /// data, and face features in the person entry will be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            public static void Delete(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId)
            {
                operations.DeleteAsync(largePersonGroupId, personId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing person from a large person group. All stored person
            /// data, and face features in the person entry will be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(largePersonGroupId, personId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve a person's information, including registered persisted faces, name
            /// and userData.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            public static Person Get(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId)
            {
                return operations.GetAsync(largePersonGroupId, personId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a person's information, including registered persisted faces, name
            /// and userData.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Person> GetAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(largePersonGroupId, personId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update name or userData of a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            public static void Update(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, string name = default(string), string userData = default(string))
            {
                operations.UpdateAsync(largePersonGroupId, personId, name, userData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update name or userData of a person.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='name'>
            /// User defined name, maximum length is 128.
            /// </param>
            /// <param name='userData'>
            /// User specified data. Length should not exceed 16KB.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, string name = default(string), string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(largePersonGroupId, personId, name, userData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a face from a person. Relative feature for the persisted face will
            /// also be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            public static void DeleteFace(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId)
            {
                operations.DeleteFaceAsync(largePersonGroupId, personId, persistedFaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a face from a person. Relative feature for the persisted face will
            /// also be deleted.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteFaceAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteFaceWithHttpMessagesAsync(largePersonGroupId, personId, persistedFaceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve information about a persisted face (specified by persistedFaceId,
            /// personId and its belonging largePersonGroupId).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            public static PersistedFace GetFace(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId)
            {
                return operations.GetFaceAsync(largePersonGroupId, personId, persistedFaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve information about a persisted face (specified by persistedFaceId,
            /// personId and its belonging largePersonGroupId).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersistedFace> GetFaceAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFaceWithHttpMessagesAsync(largePersonGroupId, personId, persistedFaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a person persisted face's userData field.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            /// <param name='userData'>
            /// User-provided data attached to the face. The size limit is 1KB.
            /// </param>
            public static void UpdateFace(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId, string userData = default(string))
            {
                operations.UpdateFaceAsync(largePersonGroupId, personId, persistedFaceId, userData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a person persisted face's userData field.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='persistedFaceId'>
            /// Id referencing a particular persistedFaceId of an existing face.
            /// </param>
            /// <param name='userData'>
            /// User-provided data attached to the face. The size limit is 1KB.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateFaceAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, System.Guid persistedFaceId, string userData = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateFaceWithHttpMessagesAsync(largePersonGroupId, personId, persistedFaceId, userData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a representative face to a person for identification. The input face is
            /// specified as an image with a targetFace rectangle.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image
            /// </param>
            /// <param name='userData'>
            /// User-specified data about the face for any purpose. The maximum length is
            /// 1KB.
            /// </param>
            /// <param name='targetFace'>
            /// A face rectangle to specify the target face to be added to a person in the
            /// format of "targetFace=left,top,width,height". E.g.
            /// "targetFace=10,10,100,100". If there is more than one face in the image,
            /// targetFace is required to specify which face to add. No targetFace means
            /// there is only one face detected in the entire image.
            /// </param>
            public static PersistedFace AddFaceFromUrl(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, string url, string userData = default(string), IList<int> targetFace = default(IList<int>))
            {
                return operations.AddFaceFromUrlAsync(largePersonGroupId, personId, url, userData, targetFace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a representative face to a person for identification. The input face is
            /// specified as an image with a targetFace rectangle.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='url'>
            /// Publicly reachable URL of an image
            /// </param>
            /// <param name='userData'>
            /// User-specified data about the face for any purpose. The maximum length is
            /// 1KB.
            /// </param>
            /// <param name='targetFace'>
            /// A face rectangle to specify the target face to be added to a person in the
            /// format of "targetFace=left,top,width,height". E.g.
            /// "targetFace=10,10,100,100". If there is more than one face in the image,
            /// targetFace is required to specify which face to add. No targetFace means
            /// there is only one face detected in the entire image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersistedFace> AddFaceFromUrlAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, string url, string userData = default(string), IList<int> targetFace = default(IList<int>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddFaceFromUrlWithHttpMessagesAsync(largePersonGroupId, personId, url, userData, targetFace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a representative face to a person for identification. The input face is
            /// specified as an image with a targetFace rectangle.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='userData'>
            /// User-specified data about the face for any purpose. The maximum length is
            /// 1KB.
            /// </param>
            /// <param name='targetFace'>
            /// A face rectangle to specify the target face to be added to a person in the
            /// format of "targetFace=left,top,width,height". E.g.
            /// "targetFace=10,10,100,100". If there is more than one face in the image,
            /// targetFace is required to specify which face to add. No targetFace means
            /// there is only one face detected in the entire image.
            /// </param>
            public static PersistedFace AddFaceFromStream(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, Stream image, string userData = default(string), IList<int> targetFace = default(IList<int>))
            {
                return operations.AddFaceFromStreamAsync(largePersonGroupId, personId, image, userData, targetFace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a representative face to a person for identification. The input face is
            /// specified as an image with a targetFace rectangle.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='largePersonGroupId'>
            /// Id referencing a particular large person group.
            /// </param>
            /// <param name='personId'>
            /// Id referencing a particular person.
            /// </param>
            /// <param name='image'>
            /// An image stream.
            /// </param>
            /// <param name='userData'>
            /// User-specified data about the face for any purpose. The maximum length is
            /// 1KB.
            /// </param>
            /// <param name='targetFace'>
            /// A face rectangle to specify the target face to be added to a person in the
            /// format of "targetFace=left,top,width,height". E.g.
            /// "targetFace=10,10,100,100". If there is more than one face in the image,
            /// targetFace is required to specify which face to add. No targetFace means
            /// there is only one face detected in the entire image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PersistedFace> AddFaceFromStreamAsync(this ILargePersonGroupPerson operations, string largePersonGroupId, System.Guid personId, Stream image, string userData = default(string), IList<int> targetFace = default(IList<int>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddFaceFromStreamWithHttpMessagesAsync(largePersonGroupId, personId, image, userData, targetFace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
