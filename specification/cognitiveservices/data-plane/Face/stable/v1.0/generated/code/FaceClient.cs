// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace foo.bar
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// An API for face detection, verification, and identification.
    /// </summary>
    public partial class FaceClient : ServiceClient<FaceClient>, IFaceClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        internal string BaseUri {get; set;}

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Supported Cognitive Services endpoints (protocol and hostname, for example:
        /// https://westus.api.cognitive.microsoft.com).
        /// </summary>
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets the IFace.
        /// </summary>
        public virtual IFace Face { get; private set; }

        /// <summary>
        /// Gets the IPersonGroupPerson.
        /// </summary>
        public virtual IPersonGroupPerson PersonGroupPerson { get; private set; }

        /// <summary>
        /// Gets the IPersonGroupOperations.
        /// </summary>
        public virtual IPersonGroupOperations PersonGroup { get; private set; }

        /// <summary>
        /// Gets the IFaceListOperations.
        /// </summary>
        public virtual IFaceListOperations FaceList { get; private set; }

        /// <summary>
        /// Gets the ILargePersonGroupPerson.
        /// </summary>
        public virtual ILargePersonGroupPerson LargePersonGroupPerson { get; private set; }

        /// <summary>
        /// Gets the ILargePersonGroupOperations.
        /// </summary>
        public virtual ILargePersonGroupOperations LargePersonGroup { get; private set; }

        /// <summary>
        /// Gets the ILargeFaceListOperations.
        /// </summary>
        public virtual ILargeFaceListOperations LargeFaceList { get; private set; }

        /// <summary>
        /// Gets the ISnapshotOperations.
        /// </summary>
        public virtual ISnapshotOperations Snapshot { get; private set; }

        /// <summary>
        /// Initializes a new instance of the FaceClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling FaceClient.Dispose(). False: will not dispose provided httpClient</param>
        public FaceClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the FaceClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public FaceClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the FaceClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public FaceClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Face = new Face(this);
            PersonGroupPerson = new PersonGroupPerson(this);
            PersonGroup = new PersonGroupOperations(this);
            FaceList = new FaceListOperations(this);
            LargePersonGroupPerson = new LargePersonGroupPerson(this);
            LargePersonGroup = new LargePersonGroupOperations(this);
            LargeFaceList = new LargeFaceListOperations(this);
            Snapshot = new SnapshotOperations(this);
            BaseUri = "{Endpoint}/face/v1.0";
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
